{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "def evaluate(h, y):    #считать отдельно для каждого класса = сделать более общий вариант\n",
    "    dct = {}\n",
    "    total = len(h)\n",
    "    for i, e in enumerate(y):\n",
    "        if e in dct:\n",
    "            dct[e] += 1\n",
    "        else:\n",
    "            dct[e] = 1        \n",
    "    #print('DCT:', dct, '\\n')    #dct - частотность элементов в эталоне\n",
    "    d = {}        \n",
    "    for key in dct:\n",
    "        cff = dct[key]/total    #cff - доля элемента key в эталоне\n",
    "        TP, TN, FP, FN = 0, 0, 0, 0\n",
    "        \"\"\"for i, e in enumerate(h):\n",
    "            if e == y[i]:\n",
    "                if e == key:\n",
    "                    TP += 1\n",
    "                else:\n",
    "                    TN += 1\n",
    "            else:\n",
    "                if e == key:\n",
    "                    FP += 1\n",
    "                else:\n",
    "                    FN += 1\"\"\"\n",
    "        for i, e in enumerate(h):\n",
    "            if e == key:\n",
    "                if e == y[i]:\n",
    "                    TP += 1\n",
    "                else:\n",
    "                    FP += 1\n",
    "            else:\n",
    "                if y[i] == key:\n",
    "                    FN += 1\n",
    "                else:\n",
    "                    TN += 1\n",
    "        \n",
    "        #print('TP', TP)\n",
    "        #print('TN', TN)\n",
    "        #print('FP', FP)\n",
    "        #print('FN', FN)\n",
    "        \n",
    "        acc =  round((TP + TN) / total, 3)    #accuracy\n",
    "        P = round(TP / (TP + FP), 3)    #precision\n",
    "        R = round(TP  / (TP + FN), 3)    #recall\n",
    "        F1 = round(2 *P*R/(P + R), 3)\n",
    "        \n",
    "        d[key] = (cff, acc, P, R, F1)\n",
    "        print('class =', key, ' |  cff = ', cff, '  | ', d[key][1:])\n",
    "    return d\n",
    "\n",
    "    #среднЕВЗВЕШЕННАЯ Ф1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "def find_mean(d):\n",
    "    print('mean = ', end='')\n",
    "    for i in range(1,5):\n",
    "        s = 0\n",
    "        for key in d:\n",
    "            cff = d[key][0]\n",
    "            s += cff * d[key][i]\n",
    "        print(round(s, 3), end='  ')\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "coefficient, accuracy, precision, recall, F1\n",
      "--------------------------------------------------\n",
      "class = neg  |  cff =  0.7   |  (0.5, 0.75, 0.429, 0.546)\n",
      "class = pos  |  cff =  0.3   |  (0.5, 0.333, 0.667, 0.444)\n",
      "mean = 0.5  0.625  0.5  0.515  \n",
      "--------------------------------------------------\n",
      "class = 0  |  cff =  0.5   |  (0.5, 0.5, 0.4, 0.444)\n",
      "class = 1  |  cff =  0.5   |  (0.5, 0.5, 0.6, 0.545)\n",
      "mean = 0.5  0.5  0.5  0.495  \n",
      "--------------------------------------------------\n",
      "class = 0  |  cff =  0.5   |  (0.5, 0.5, 0.6, 0.545)\n",
      "class = 1  |  cff =  0.5   |  (0.5, 0.5, 0.4, 0.444)\n",
      "mean = 0.5  0.5  0.5  0.495  \n",
      "--------------------------------------------------\n",
      "class = 0  |  cff =  0.8   |  (0.7, 0.857, 0.75, 0.8)\n",
      "class = 1  |  cff =  0.2   |  (0.7, 0.333, 0.5, 0.4)\n",
      "mean = 0.7  0.752  0.7  0.72  \n",
      "--------------------------------------------------\n",
      "class = 0  |  cff =  0.8   |  (0.4, 1.0, 0.25, 0.4)\n",
      "class = 1  |  cff =  0.2   |  (0.4, 0.25, 1.0, 0.4)\n",
      "mean = 0.4  0.85  0.4  0.4  \n",
      "--------------------------------------------------\n",
      "class = 1  |  cff =  0.4   |  (0.7, 0.667, 0.5, 0.572)\n",
      "class = 2  |  cff =  0.3   |  (0.6, 0.333, 0.333, 0.333)\n",
      "class = 3  |  cff =  0.3   |  (0.7, 0.5, 0.667, 0.572)\n",
      "mean = 0.67  0.517  0.5  0.5  \n"
     ]
    }
   ],
   "source": [
    "#h = (1, 1, 2, 2, 3, 3, 1, 2, 3, 3)    #гипотеза\n",
    "#y = (1, 2, 3, 1, 2, 3, 1, 2, 3, 1)    #эталон\n",
    "\n",
    "print('coefficient, accuracy, precision, recall, F1')\n",
    "\n",
    "for h, y in ((('pos', 'neg', 'pos', 'pos', 'neg', 'pos', 'neg', 'pos', 'neg', 'pos'),\n",
    "                ('pos', 'neg', 'pos', 'neg', 'neg', 'neg', 'neg', 'neg', 'pos', 'neg')),\n",
    "                 ((1, 1, 0, 0, 1, 1, 0, 0, 1, 1), (1, 1, 1, 1, 1, 0, 0, 0, 0, 0)),\n",
    "                 ((1, 1, 0, 0, 0, 0, 0, 0, 1, 1), (1, 1, 1, 1, 1, 0, 0, 0, 0, 0)),\n",
    "                 ((1, 0, 0, 0, 0, 0, 0, 0, 1, 1), (1, 1, 0, 0, 0, 0, 0, 0, 0, 0)),\n",
    "                 ((1, 1, 1, 1, 1, 1, 0, 0, 1, 1), (1, 1, 0, 0, 0, 0, 0, 0, 0, 0)),\n",
    "                 ((1, 1, 2, 2, 3, 3, 1, 2, 3, 3), (1, 2, 3, 1, 2, 3, 1, 2, 3, 1))\n",
    "                 ):\n",
    "    print('-'*50)\n",
    "    d = evaluate(h, y)\n",
    "    find_mean(d)\n",
    "    print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#answers:\n",
    "    #1: acc 0.5; p 0.33, r 0.66, f1 0.44 (не взвешенная)\n",
    "    #2: acc 0.5; p 0.75; 5 0.43, f1 0.55 (не взвешенная)\n",
    "    #mean: acc 0.5, p 0.63, r 0.5, f1 0.52 (взвешенная)\n",
    "    "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
